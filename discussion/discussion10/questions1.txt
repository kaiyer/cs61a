1. Translate the following Python representation of Calculator expressions into the proper
Scheme-syntax:
>>> Pair(’+’, Pair(1, Pair(2, Pair(3, Pair(4, nil)))))
>>> Pair(’+’, Pair(’1’, Pair(Pair(’*’, Pair(2, Pair(3, nil))), nil)))

(+ 1 2 3 4 )
(+ 1 (* 2 3))

2. Translate the following Calculator expressions into calls to the Pair constructor.
> (+ 1 2 (- 3 4))
Pair('+', Pair(1, Pair(2, Pair('-', Pair(3, Pair(4, nil))))))

> (+ 1 (* 2 3) 4)
Pair('+', Pair( 1, Pair( Pair (Pair('*', Pair(2, Pair(3, nil)))...

1. Suppose we typed each of the following expressions into the Calculator interpreter.
How many calls to calc_eval would they each generate? How many calls to calc_apply?
> (+ 2 4 6 8)

1 x calc_eval for whole expression
4 x calc_eval via operants.map, Pair.map is recursive
5 x calc_eval in sum
1 x calc_apply at the end

> (+ 2 (* 4 (- 6 8)))

1 x calc_eval for whole expression
1 x calc_eval for "2 (* 4...)" as operant
1 x calc_eval for ( * 4 ...)
1 x calc_eval for "4 (- 6...) as operant
1 x calc_eval for ( - 6 8 ) as operant
1 x calc_eval for (6 8)
1 x calc_eval for 6
1 x calc_eval for 8
8 x calc_eval ?

3 x calc_apply (for each operator)

2. The - operator will fail if given no arguments. Add error handling to raise an excep-
tion when this situation is encountered (the type of exception is unimportant).

    elif operator == ’-’:
    if not args:
        raise TypeError("No arguments supplied")
    
    elif len(args) == 1:
        return -args[0]
    else:
        return sum(args[0], [-args for args in args[1:]])

3. We also want to be able to perform division, as in (/ 4 2). Supplement the existing
code to handle this. If division by 0 is attempted, or if there are less than 2 arguments
supplied, you should raise an exception (the type of exception is unimportant).

    elif operator == ’/’:
        if len(args) < 2 or args[1] == 0:
            raise TypeError("Wrong arguments")

        from operator import truediv
        from functools import reduce

        return reduce(truediv, args)

4. Alyssa P. Hacker and Ben Bitdiddle are also tasked with implementing the and oper-
ator, as in (and (= 1 2) (< 3 4)). Ben says this is easy: they just have to follow
the same process as in implementing * and /. Alyssa is not so sure. Who’s right?

  should be straight forward, although we have now boolean as third type, 
  the isnotinstance check as base crit in cal_eval should also handle that.
  the boolean arguments are then packed into the list and the "apply" function ("and" branch)
  needs to deal with / check the input data

  ok, solution tells different:

  Solution: Alyssa. We can’t handle and in the apply step since and is a special
  form: it is short-circuited. We need to create a special case for it in calc eval.
