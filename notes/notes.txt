1.2
"Pure functions are restricted in that they cannot have side effects or change behavior over time. "

HOF definition:
    A function that manipulates other functions as data is called a higher order function (HOF).
    For instance, a HOF can be a function that takes functions as arguments, returns a function
    as its value, or both.

difference defining functions with "def" vs. lambda expression:
  - "def" is a statement, evaluation has a side effect > generating function binding in current environment
  - lambda is an expression which won't usually change environemnt
    exception: lambda expression is assigned to a variable

pattern for designing recursive functions:
 - start with a base case, conditional statement for function inputs that are >>>simplest<<< 
   to process
 - base case is followed by one or more recursive calls. recursive calls have one goal:
   >>>simplifying the original problem<<<.
   recursive functions express computation by simplifying problems incremendially
     
leap of faith:
 - treating a recursive call as a function abstraction
 
mutual recursion:
 - a recursive procedure is divided by two functions calling each other  


tipps from lab for recursive functions:

  1. Always start with the base case. The base case handles the simplest argument 
     your function would have to handle. The answer is extremely simple, and often 
     follows from the definition of the problem.

  2. Make a recursive call with a slightly simpler argument. This is called the 
     "leap of faith" - your simpler argument should simplify the problem, and you 
     should assume that the recursive call for this simpler problem will just work. 
     As you do more problems, you'll get better at this step.

  3. Use the recursive call. Remember that the recursive call solves a simpler version 
     of the problem. Now ask yourself how you can use this result to solve the original 
     problem.

As a general rule of thumb, whenever you need to try multiple possibilities at the same time, 
you should consider using tree recursion.

Data Abstraction
----------------
Data abstraction is a methodology that enables us to isolate how a compound data object
is used from the details of how it is constructed.

TODO clearify "proof by induction"


running doc tests:
python3 -m doctest -v hog.py


noetherian induction:
a relation on values is well founded if there are no infinite decending chaines.

"If you start at some value and keep stepping to smaller values (according to the relation)
then you must always get to a minimal value after finite steps."

add:
basic recursion rules + example


swap:

score + margin = opponent score : return 0

harmful

opponent score + margin = score: return num_rolls


backup lecture data
-------------------
mount mac: mount -t cifs //192.168.2.3/samba /mnt/mac/ -o username=samba
mirror web page: wget -mk -w 20 http://inst.cs.berkeley.edu/~cs61a/sp14/
dowload lecture screencasts: youtube-dl -citk --max-quality FORMAT 'https://www.youtube.com/view_play_list?p=-XXv-cvA_iC9x0nmh5OZyxljQU6pUWWk'

